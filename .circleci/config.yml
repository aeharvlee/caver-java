version: 2

android_machine_ubuntu: &android_machine_ubuntu
  working_directory: ~/circleci-caver-java-android
  machine:
    image: ubuntu-1604:201903-01

android_machine: &android_machine
  working_directory: ~/circleci-caver-java-android
  machine:
    image: android:202102-01

pull_klaytn_image: &pull_klaytn_image
  run:
    name: "Pull and tag Klaytn image"
    command: |
          docker pull klaytn/build_base:latest
          docker image tag klaytn/build_base:latest klaytn

check_test_network: &check_test_network
  run:
    name: "Check test network"
    command: |
        MAXRETRY=600
        RETRY=0
        while [ $RETRY -lt $MAXRETRY ]
        do
            if curl --fail -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"rpc_modules","params":[],"id":1}' http://localhost:8551 2>/dev/null; then
                echo "Klaytn RPC server is up"
                break
            else
                echo "wait for Klyatn RPC server..."
                sleep 5
            fi
            RETRY=$(($RETRY+5))
        done
        if [ $RETRY -eq $MAXRETRY ]; then
            echo "failed to connect Klaytn RPC server"
            exit 1
        fi

start_test_network: &start_test_network
  run:
    name: "Start test network"
    working_directory: .circleci/images
    command: |
        docker-compose up -d

build_test: &build_test
  run:
    name: "Build and test"
    command: |
        ./gradlew clean
        ./gradlew build --scan --debug

jobs:
  android_build:
    <<: *android_machine
    steps:
      - checkout
      - *pull_klaytn_image
      - *start_test_network
      - *check_test_network
      - run:
          name: "Change to Android version"
          command: |
            version=$(.circleci/version.sh)
            sed -i "s/version '.*'/version '${version}-android'/" build.gradle 
            sed -i "s/ext.web3jVersion = '.*'/ext.web3jVersion = '$web3j_version-android'/" build.gradle 
            sed -i "s/java.util.concurrent.CompletableFuture/java8.util.concurrent.CompletableFuture/" core/src/test/java/com/klaytn/caver/legacy/scenario/FastTransactionManagerIT.java

            if [ -z "$CIRCLE_TAG" ]; then
              echo "this is not RC version"
            else
              echo "trigger CIRCLE_TAG $CIRCLE_TAG"
              sed -i "s/version '.*'/version '${CIRCLE_TAG:1}-android'/" build.gradle
              sed -i "s/ext.web3jVersion = '.*'/ext.web3jVersion = '$web3j_version-android'/" build.gradle
              sed -i "s/java.util.concurrent.CompletableFuture/java8.util.concurrent.CompletableFuture/" core/src/test/java/com/klaytn/caver/legacy/scenario/FastTransactionManagerIT.java
            fi

            awk '/version '\''/' build.gradle
            awk '/ext.web3jVersion = '\''/' build.gradle

      - run:
          name: Create avd
          command: |
            SYSTEM_IMAGES="system-images;android-29;default;x86"
            sdkmanager "$SYSTEM_IMAGES"
            echo "no" | avdmanager --verbose create avd -n caver -k "$SYSTEM_IMAGES"
      - run:
          name: Launch emulator
          command: |
            emulator -avd caver -delay-adb -verbose -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
          background: true
      - run:
          name: Generate cache key
          command: |
            find . -name 'build.gradle' | sort | xargs cat |
            shasum | awk '{print $1}' > /tmp/gradle_cache_seed
      - restore_cache:
          key: gradle-v1-{{ arch }}-{{ checksum "/tmp/gradle_cache_seed" }}
      - run:
          name: Wait for emulator to start
          command: |
            circle-android wait-for-boot
      - run:
          name: Disable emulator animations
          command: |
            adb shell settings put global window_animation_scale 0.0
            adb shell settings put global transition_animation_scale 0.0
            adb shell settings put global animator_duration_scale 0.0
      - run:
          name: Run build (with retry)
          command: |
            MAX_TRIES=2
            run_with_retry() {
               n=1
               until [ $n -gt $MAX_TRIES ]
               do
                  echo "Starting test attempt $n"
                  ./gradlew clean && ./gradlew build --scan --debug && break
                  n=$[$n+1]
                  sleep 5
               done
               if [ $n -gt $MAX_TRIES ]; then
                 echo "Max tries reached ($MAX_TRIES)"
                 exit 1
               fi
            }
            run_with_retry
      - save_cache:
          key: gradle-v1-{{ arch }}-{{ checksum "/tmp/gradle_cache_seed" }}
          paths:
            - ~/.gradle/caches
            - ~/.gradle/wrapper
      - persist_to_workspace:
          root: ~/
          paths: 
            - circleci-caver-java-android/*

workflows:
  version: 2
  workflow_build_deploy:
    jobs:
    - android_build:
        filters:
          branches:
            ignore:
              - /release\/.*/
              - master
          # tags:
          #   only: /^v[0-9]+\.[0-9]+\.[0-9]+/
          #   only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/